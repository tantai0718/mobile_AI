require('dotenv').config();

const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const mysql = require('mysql2');
const path = require('path');
const multer = require('multer');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// Load API Keys t·ª´ .env
const WIT_AI_ACCESS_TOKEN = process.env.WIT_AI_ACCESS_TOKEN;
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;

// Ki·ªÉm tra API Key
if (!DEEPSEEK_API_KEY) {
    console.error('‚ùå L·ªñI: Ch∆∞a c√≥ DEEPSEEK_API_KEY trong .env!');
    process.exit(1);
}
if (!WIT_AI_ACCESS_TOKEN) {
    console.error('‚ùå L·ªñI: Ch∆∞a c√≥ WIT_AI_ACCESS_TOKEN trong .env!');
    process.exit(1);
}

// K·∫øt n·ªëi MySQL
const db = mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME
});

db.connect(err => {
    if (err) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MySQL:', err);
        process.exit(1);
    }
    console.log('‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!');
});

// C·∫•u h√¨nh multer ƒë·ªÉ upload file
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadPath = path.join(__dirname, 'public', 'images');
        if (!fs.existsSync(uploadPath)) {
            fs.mkdirSync(uploadPath, { recursive: true });
        }
        cb(null, uploadPath);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const ext = path.extname(file.originalname);
        cb(null, file.fieldname + '-' + uniqueSuffix + ext);
    }
});

const upload = multer({
    storage: storage,
    fileFilter: (req, file, cb) => {
        const filetypes = /jpeg|jpg|png/;
        const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
        const mimetype = filetypes.test(file.mimetype);
        if (extname && mimetype) {
            return cb(null, true);
        } else {
            cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (jpeg, jpg, png)!'));
        }
    },
    limits: { fileSize: 5 * 1024 * 1024 } // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file: 5MB
});

// Middleware
app.use(bodyParser.json());
app.use(express.static('public'));
app.use('/admin', express.static('admin'));
app.use('/images', express.static('public/images'));

// Route cho trang ch√≠nh (chatbot)
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Route cho trang qu·∫£n tr·ªã
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin', 'index.html'));
});

// H√†m ƒë·ªãnh d·∫°ng gi√° theo chu·∫©n Vi·ªát Nam
function formatPrice(price) {
    return price.toLocaleString('vi-VN', { minimumFractionDigits: 0, maximumFractionDigits: 0 }) + ' VNƒê';
}

// H√†m truy v·∫•n SQL v·ªõi Promise
const query = (sql, params) => {
    return new Promise((resolve, reject) => {
        console.log('üìã Truy v·∫•n SQL:', sql);
        console.log('üìã Tham s·ªë:', params);
        db.query(sql, params, (err, results) => {
            if (err) {
                console.error('‚ùå L·ªói truy v·∫•n MySQL:', err);
                reject(err);
            } else {
                resolve(results);
            }
        });
    });
};

// API l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ MySQL (th√™m ph√¢n trang, t√¨m ki·∫øm, l·ªçc)
app.get('/products', async (req, res) => {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;
    const search = req.query.search || '';
    const minPrice = parseFloat(req.query.minPrice) || 0;
    let maxPrice = parseFloat(req.query.maxPrice) || Infinity;
    const brand = req.query.brand || '';

    if (maxPrice === Infinity || isNaN(maxPrice)) {
        maxPrice = 999999999;
    }
    if (isNaN(minPrice)) {
        minPrice = 0;
    }

    let whereConditions = [
        `(LOWER(p.name) LIKE LOWER(?) OR LOWER(p.brand) LIKE LOWER(?))`,
        `p.price BETWEEN ? AND ?`
    ];
    let params = [`%${search}%`, `%${search}%`, minPrice, maxPrice];

    if (brand) {
        whereConditions.push(`p.brand = ?`);
        params.push(brand);
    }

    const whereClause = whereConditions.join(' AND ');

    try {
        const products = await query(
            `SELECT p.*, 
                    (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ') 
                     FROM promotions 
                     WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                    (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ') 
                     FROM features 
                     WHERE product_id = p.product_id) AS features
             FROM products p 
             WHERE ${whereClause}
             LIMIT ? OFFSET ?`,
            [...params, limit, offset]
        );

        // ƒê·ªãnh d·∫°ng gi√° cho t·ª´ng s·∫£n ph·∫©m
        const formattedProducts = products.map(product => ({
            ...product,
            formattedPrice: formatPrice(product.price)
        }));

        const totalResult = await query(
            `SELECT COUNT(*) as total 
             FROM products p 
             WHERE ${whereClause}`,
            [...params]
        );

        const total = totalResult && totalResult.length > 0 ? totalResult[0].total : 0;

        res.json({ products: formattedProducts, total, page, limit });
    } catch (err) {
        res.status(500).json({ error: 'L·ªói truy v·∫•n d·ªØ li·ªáu.', details: err.message });
    }
});

// API th√™m s·∫£n ph·∫©m (c√≥ upload h√¨nh ·∫£nh)
app.post('/admin/products', upload.single('image'), async (req, res) => {
    const { name, brand, description, price, colors, storage, release_date, warranty_period } = req.body;
    const image_url = req.file ? req.file.filename : null;

    if (!name || !brand || !price) {
        return res.status(400).json({ error: 'T√™n, th∆∞∆°ng hi·ªáu v√† gi√° l√† b·∫Øt bu·ªôc.' });
    }

    try {
        await query(
            `INSERT INTO products (name, brand, description, price, colors, storage, release_date, warranty_period, image_url) 
             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [name, brand, description, price, colors, storage, release_date, warranty_period, image_url]
        );
        res.json({ message: 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        res.status(500).json({ error: 'L·ªói khi th√™m s·∫£n ph·∫©m.', details: err.message });
    }
});

// API s·ª≠a s·∫£n ph·∫©m (c√≥ upload h√¨nh ·∫£nh)
app.put('/admin/products/:id', upload.single('image'), async (req, res) => {
    const productId = req.params.id;
    const { name, brand, description, price, colors, storage, release_date, warranty_period } = req.body;
    const image_url = req.file ? req.file.filename : req.body.image_url;

    if (!name || !brand || !price) {
        return res.status(400).json({ error: 'T√™n, th∆∞∆°ng hi·ªáu v√† gi√° l√† b·∫Øt bu·ªôc.' });
    }

    try {
        if (req.file) {
            const oldProduct = await query(
                `SELECT image_url FROM products WHERE product_id = ?`,
                [productId]
            );
            if (oldProduct[0]?.image_url) {
                const oldImagePath = path.join(__dirname, 'public', 'images', oldProduct[0].image_url);
                if (fs.existsSync(oldImagePath)) {
                    fs.unlinkSync(oldImagePath);
                }
            }
        }

        const result = await query(
            `UPDATE products 
             SET name = ?, brand = ?, description = ?, price = ?, colors = ?, storage = ?, release_date = ?, warranty_period = ?, image_url = ? 
             WHERE product_id = ?`,
            [name, brand, description, price, colors, storage, release_date, warranty_period, image_url, productId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.' });
        }

        res.json({ message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        res.status(500).json({ error: 'L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m.', details: err.message });
    }
});

// API x√≥a s·∫£n ph·∫©m
app.delete('/admin/products/:id', async (req, res) => {
    const productId = req.params.id;

    try {
        const product = await query(
            `SELECT image_url FROM products WHERE product_id = ?`,
            [productId]
        );
        if (product[0]?.image_url) {
            const imagePath = path.join(__dirname, 'public', 'images', product[0].image_url);
            if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
            }
        }

        const result = await query(
            `DELETE FROM products WHERE product_id = ?`,
            [productId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.' });
        }

        res.json({ message: 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        res.status(500).json({ error: 'L·ªói khi x√≥a s·∫£n ph·∫©m.', details: err.message });
    }
});

// H√†m g·ªçi API Wit.ai
async function getWitResponse(message) {
    try {
        const response = await axios.get(
            `https://api.wit.ai/message?v=20220201&q=${encodeURIComponent(message)}`,
            {
                headers: { Authorization: `Bearer ${WIT_AI_ACCESS_TOKEN}` }
            }
        );
        return response.data;
    } catch (error) {
        console.error('‚ùå L·ªói t·ª´ Wit.ai:', error.response?.data || error.message);
        return null;
    }
}

// H√†m g·ªçi DeepSeek AI
async function getDeepSeekResponse(message, context = {}) {
    try {
        const response = await axios.post(
            'https://api.deepseek.com/v1/chat/completions',
            {
                model: 'deepseek-chat',
                messages: [
                    {
                        role: 'system',
                        content: 'B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. H√£y tr·∫£ l·ªùi t·ª± nhi√™n v√† ph√π h·ª£p.'
                    },
                    {
                        role: 'user',
                        content: `Ng∆∞·ªùi d√πng h·ªèi: "${message}". Ng·ªØ c·∫£nh: ${JSON.stringify(context)}.`
                    }
                ],
                max_tokens: 500,
                temperature: 0.7
            },
            {
                headers: {
                    'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        return response.data.choices[0].message.content;
    } catch (error) {
        console.error('‚ùå L·ªói t·ª´ DeepSeek AI:', error.response?.data || error.message);
        return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay b√¢y gi·ªù. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i ho·∫∑c cung c·∫•p th√™m th√¥ng tin kh√¥ng?';
    }
}

// H√†m l·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ MySQL
async function getProductInfo(productName) {
    try {
        const results = await query(
            `SELECT p.*, 
                    (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ') 
                     FROM promotions 
                     WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                    (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ') 
                     FROM features 
                     WHERE product_id = p.product_id) AS features
             FROM products p 
             WHERE LOWER(p.name) LIKE LOWER(?)`,
            [`%${productName}%`]
        );
        return results[0] || null;
    } catch (err) {
        console.error('‚ùå L·ªói l·∫•y th√¥ng tin s·∫£n ph·∫©m:', err);
        return null;
    }
}

// H√†m t√¨m s·∫£n ph·∫©m theo kho·∫£ng gi√°
async function findProductsByPriceRange(minPrice, maxPrice, productName = null) {
    try {
        let sql = `
            SELECT p.*,
                   (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ')
                     FROM promotions
                     WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                   (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ')
                     FROM features
                     WHERE product_id = p.product_id) AS features
            FROM products p
            WHERE p.price BETWEEN ? AND ?
        `;
        const params = [minPrice, maxPrice];

        if (productName) {
            sql += ` AND LOWER(p.name) LIKE LOWER(?)`;
            params.push(`%${productName}%`);
        }

        console.log("SQL Query:", sql);
        console.log("SQL Params:", params);

        const products = await query(sql, params);
        console.log("Products from DB:", products);

        return products;
    } catch (err) {
        console.error('‚ùå L·ªói t√¨m s·∫£n ph·∫©m theo gi√°:', err);
        throw err;
    }
}

// H√†m t√¨m s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
async function findProductsByBrand(brand, feature = null, color = null) {
    try {
        let sql = `SELECT p.*, 
                          (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ') 
                           FROM promotions 
                           WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                          (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ') 
                           FROM features 
                           WHERE product_id = p.product_id) AS features
                   FROM products p 
                   WHERE p.brand = ?`;
        let params = [brand];

        if (feature) {
            sql += ` AND EXISTS (
                        SELECT 1 
                        FROM features f 
                        WHERE f.product_id = p.product_id 
                        AND LOWER(f.feature_name) LIKE LOWER(?)
                    )`;
            params.push(`%${feature}%`);
        }

        if (color) {
            sql += ` AND LOWER(p.colors) LIKE LOWER(?)`;
            params.push(`%${color}%`);
        }

        return await query(sql, params);
    } catch (err) {
        console.error('‚ùå L·ªói t√¨m s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu:', err);
        return [];
    }
}

// H√†m so s√°nh hai s·∫£n ph·∫©m
async function compareProducts(productName1, productName2) {
    try {
        const product1 = await getProductInfo(productName1);
        const product2 = await getProductInfo(productName2);

        if (!product1 || !product2) {
            return null;
        }

        return { product1, product2 };
    } catch (err) {
        console.error('‚ùå L·ªói so s√°nh s·∫£n ph·∫©m:', err);
        return null;
    }
}

// H√†m t√¨m th∆∞∆°ng hi·ªáu trong c√¢u h·ªèi n·∫øu Wit.ai kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c
function extractBrandFromMessage(message) {
    const brands = ['vivo', 'oppo', 'samsung', 'apple', 'xiaomi'];
    const messageLower = message.toLowerCase();
    for (const brand of brands) {
        if (messageLower.includes(brand)) {
            return brand.charAt(0).toUpperCase() + brand.slice(1);
        }
    }
    return null;
}

// H√†m g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±
async function suggestSimilarProducts(brand, excludeProductName) {
    try {
        const products = await query(
            `SELECT p.*,
                    (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ') 
                     FROM promotions 
                     WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                    (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ') 
                     FROM features 
                     WHERE product_id = p.product_id) AS features
             FROM products p 
             WHERE p.brand = ? AND LOWER(p.name) NOT LIKE LOWER(?)
             LIMIT 3`,
            [brand, `%${excludeProductName}%`]
        );
        return products;
    } catch (err) {
        console.error('‚ùå L·ªói g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±:', err);
        return [];
    }
}

// ƒê·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ ng·ªØ c·∫£nh cho m·ªói phi√™n
const conversationContext = {};

// Middleware ƒë·ªÉ t·∫°o ho·∫∑c l·∫•y ng·ªØ c·∫£nh cho m·ªói phi√™n
app.use((req, res, next) => {
    const sessionId = req.headers['session-id'] || req.query.sessionId || req.body.sessionId;

    if (!sessionId) {
        return res.status(400).json({ error: 'Session ID is required' });
    }

    if (!conversationContext[sessionId]) {
        conversationContext[sessionId] = {
            lastProduct: null,
            lastBrand: null,
            lastIntent: null,
            pendingOrder: null,
            history: [],
            consultation: { purpose: null, budget: null, feature: null, color: null }
        };
    }
    req.context = conversationContext[sessionId];
    req.sessionId = sessionId;
    next();
});

// API x·ª≠ l√Ω chatbot
app.post('/chatbot', async (req, res) => {
    const userMessage = req.body.message.toLowerCase();
    const sessionId = req.sessionId;
    const context = req.context;

    console.log(`üì© User: ${userMessage} (Session: ${sessionId})`);

    // ‚úÖ B·ªï sung x·ª≠ l√Ω n·∫øu bot ƒëang ch·ªù ng∆∞·ªùi d√πng ch·ªçn m·∫´u s·∫£n ph·∫©m
    if (context.awaitingProductChoice) {
        const targetProduct = await getProductInfo(userMessage);

        if (targetProduct) {
            const reply = `üìå **${targetProduct.name} (${targetProduct.brand})**:\n` +
                          `${targetProduct.description || 'Ch∆∞a c√≥ m√¥ t·∫£'}\n` +
                          `üí∞ **Gi√°**: ${formatPrice(targetProduct.price)}\n` +
                          `üé® **M√†u s·∫Øc**: ${targetProduct.colors || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                          `üìÄ **L∆∞u tr·ªØ**: ${targetProduct.storage || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                          `üóìÔ∏è **Ra m·∫Øt**: ${targetProduct.release_date || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                          `üõ°Ô∏è **B·∫£o h√†nh**: ${targetProduct.warranty_period ? `${targetProduct.warranty_period} th√°ng` : 'Kh√¥ng c√≥'}\n` +
                          (targetProduct.promotion_names ? `üè∞ **Khuy·∫øn m√£i**: ${targetProduct.promotion_names}\n` : '') +
                          (targetProduct.features ? `üåü **T√≠nh nƒÉng**: ${targetProduct.features}` : '') +
                          `\nB·∫°n c√≥ mu·ªën ƒë·∫∑t mua s·∫£n ph·∫©m n√†y kh√¥ng?`;

            context.awaitingProductChoice = false;
            context.lastProduct = targetProduct;
            context.lastBrand = targetProduct.brand;

            return res.json({ _text: reply, imageUrl: `/images/${targetProduct.image_url}`, showButtons: true });
        } else {
            return res.json({ _text: `‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.` });
        }
    }

    try {
        const witResponse = await getWitResponse(userMessage);
        if (!witResponse || !witResponse.intents) {
            return res.json({ _text: '‚ùå L·ªói k·∫øt n·ªëi v·ªõi Wit.ai. H√£y th·ª≠ l·∫°i sau!' });
        }

        // L·∫•y intent v√† c√°c entity t·ª´ Wit.ai
        const intent = witResponse.intents?.[0]?.name || null;
        let productName = witResponse.entities?.['product_name:product_name']?.[0]?.value || null;

        // N·∫øu Wit.ai nh·∫≠n sai product name (v√≠ d·ª• nh·∫≠p "iphone 11" m√† tr·∫£ v·ªÅ "iphone 13")
        // th√¨ fallback v·ªÅ ch√≠nh userMessage lu√¥n
        if (!productName || !userMessage.includes(productName.toLowerCase())) {
            productName = userMessage;
        }

        const priceRange = witResponse.entities?.['price_range:price_range']?.[0]?.value || null;
        const feature = witResponse.entities?.['feature:feature']?.[0]?.value || null;
        const color = witResponse.entities?.['color:color']?.[0]?.value || null;
        let brand = witResponse.entities?.['brand:brand']?.[0]?.value || null;

        // N·∫øu Wit.ai kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c brand, th·ª≠ t√¨m th·ªß c√¥ng trong c√¢u h·ªèi
        if (!brand && (intent === 'tim_kiem_theo_thuong_hieu' || intent === 'tim_kiem_thuong_hieu_gia' || intent === 'tim_kiem_thuong_hieu_mau')) {
            brand = extractBrandFromMessage(userMessage);
        }

        let reply = 'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu √Ω b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?';
        let imageUrl = null;
        let showButtons = false;
        let products = null;

        console.log('Intent:', intent);
        console.log('Product Name:', productName);
        console.log('Price Range:', priceRange);
        console.log('Feature:', feature);
        console.log('Color:', color);
        console.log('Brand:', brand);

        // ============= X·ª≠ l√Ω Intent =============
        if (intent === 'tim_kiem_theo_gia') {
            const regexRange = /t·ª´\s+(\d+)\s+ƒë·∫øn\s+(\d+)\s+tri·ªáu/i;
            const regexBelow = /d∆∞·ªõi\s+(\d+)\s+tri·ªáu/i;
            const regexAbove = /tr√™n\s+(\d+)\s+tri·ªáu/i;
            const regexHave = /c√≥\s+(\d+)\s+tri·ªáu\s+mua\s+ƒë∆∞·ª£c/i;
        
            const matchRange = userMessage.match(regexRange);
            const matchBelow = userMessage.match(regexBelow);
            const matchAbove = userMessage.match(regexAbove);
            const matchHave = userMessage.match(regexHave);
        
            let minPrice = 0;
            let maxPrice = Infinity;
        
            // ∆Øu ti√™n s·ª≠ d·ª•ng priceRange t·ª´ Wit.ai n·∫øu c√≥
            if (priceRange) {
                console.log('Price Range from Wit.ai:', priceRange);
                const priceMatch = priceRange.match(/(\d+)/);
                if (priceMatch) {
                    maxPrice = parseInt(priceMatch[1]) * 1000000;
                    console.log('Extracted maxPrice from priceRange:', maxPrice);
                } else {
                    console.log('Failed to extract price from priceRange');
                    reply = "‚ùå Xin l·ªói, t√¥i kh√¥ng th·ªÉ hi·ªÉu r√µ kho·∫£ng gi√° t·ª´ th√¥ng tin b·∫°n cung c·∫•p. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng? V√≠ d·ª•: 'C√≥ ƒëi·ªán tho·∫°i n√†o d∆∞·ªõi 10 tri·ªáu kh√¥ng?'";
                    res.json({ _text: reply });
                    return;
                }
            } else if (matchRange) {
                minPrice = parseInt(matchRange[1]) * 1000000;
                maxPrice = parseInt(matchRange[2]) * 1000000;
            } else if (matchBelow) {
                maxPrice = parseInt(matchBelow[1]) * 1000000;
            } else if (matchAbove) {
                minPrice = parseInt(matchAbove[1]) * 1000000;
                maxPrice = 999999999;
            } else if (matchHave) {
                console.log('Matched regexHave:', matchHave);
                maxPrice = parseInt(matchHave[1]) * 1000000;
            } else {
                reply = "‚ùå Xin l·ªói, t√¥i kh√¥ng th·ªÉ hi·ªÉu r√µ kho·∫£ng gi√° b·∫°n mu·ªën t√¨m. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ ng√¢n s√°ch c·ªßa b·∫°n kh√¥ng? V√≠ d·ª•: 'C√≥ ƒëi·ªán tho·∫°i n√†o d∆∞·ªõi 10 tri·ªáu kh√¥ng?' ho·∫∑c 'ƒêi·ªán tho·∫°i t·ª´ 5 ƒë·∫øn 10 tri·ªáu?'";
                res.json({ _text: reply });
                return;
            }
        
            if (isNaN(minPrice) || isNaN(maxPrice) || minPrice > maxPrice) {
                reply = "‚ùå Kho·∫£ng gi√° kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!";
                res.json({ _text: reply });
                return;
            }
        
            try {
                let products = await findProductsByPriceRange(minPrice, maxPrice, productName);
                if (products && products.length > 0) {
                    reply = `Ch√†o b·∫°n! V·ªõi ng√¢n s√°ch t·ª´ ${formatPrice(minPrice)} ƒë·∫øn ${formatPrice(maxPrice)}, ƒë√¢y l√† m·ªôt s·ªë l·ª±a ch·ªçn ph√π h·ª£p:\n`;
                    reply += '<div class="product-grid">';
                    products.forEach(product => {
                        reply += `
                            <div class="product-card">
                                <img src="/images/${product.image_url}" class="product-image">
                                <div class="product-info">
                                    <h3>${product.name}</h3>
                                    <p>${formatPrice(product.price)}</p>
                                    <button class="buy-btn" data-product-name="${product.name}">Ch·ªçn m·∫´u n√†y</button>
                                </div>
                            </div>
                        `;
                    });
                    
                    reply += '</div>';
                    console.log(`ü§ñ Bot: ${reply}`);
                    res.json({ _text: reply, imageUrl: null, showButtons: false, products });
                    return;
                } else {
                    reply = `Ch√†o b·∫°n! Ti·∫øc l√† hi·ªán t·∫°i b√™n m√¨nh kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong kho·∫£ng gi√° t·ª´ ${formatPrice(minPrice)} ƒë·∫øn ${formatPrice(maxPrice)}. B·∫°n c√≥ mu·ªën xem nh·ªØng d√≤ng s·∫£n ph·∫©m kh√°c kh√¥ng ·∫°?`;
                    res.json({ _text: reply });
                    return;
                }
            } catch (error) {
                console.error("L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m: ", error);
                reply = "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t√¨m ki·∫øm s·∫£n ph·∫©m.";
                res.json({ _text: reply });
                return;
            }
        
        } else if (intent === 'thong_tin_san_pham') {
            // X·ª≠ l√Ω c√¢u h·ªèi th√¥ng tin s·∫£n ph·∫©m
            let targetProductName = productName || context.lastProduct?.name;

            if (!targetProductName) {
                reply = 'B·∫°n mu·ªën bi·∫øt th√¥ng tin v·ªÅ s·∫£n ph·∫©m n√†o? V√≠ d·ª•: "Th√¥ng tin iPhone 14"';
                res.json({ _text: reply, imageUrl: null, showButtons: false });
                return;
            }

            const product = await getProductInfo(targetProductName);

            if (product) {
                reply = `üìå **${product.name} (${product.brand})**:\n` +
                        `${product.description}\n` +
                        `üí∞ **Gi√°**: ${formatPrice(product.price)}\n` +
                        `üé® **M√†u s·∫Øc**: ${product.colors || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                        `üíæ **L∆∞u tr·ªØ**: ${product.storage || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                        `üóìÔ∏è **Ra m·∫Øt**: ${product.release_date || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                        `üõ°Ô∏è **B·∫£o h√†nh**: ${product.warranty_period ? `${product.warranty_period} th√°ng` : 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                        (product.promotion_names ? `üéÅ **Khuy·∫øn m√£i**: ${product.promotion_names}\n` : '') +
                        (product.features ? `üåü **T√≠nh nƒÉng n·ªïi b·∫≠t**: ${product.features}` : '') +
                        `\nB·∫°n c√≥ mu·ªën ƒë·∫∑t mua s·∫£n ph·∫©m n√†y kh√¥ng?`;
                imageUrl = `/images/${product.image_url}`;
                showButtons = true;
                context.lastProduct = product;
                context.lastBrand = product.brand;
                res.json({ _text: reply, imageUrl, showButtons });
                return;
            } else {
                const similarProducts = await suggestSimilarProducts(brand || context.lastBrand || 'Apple', targetProductName);

                if (similarProducts.length > 0) {
                    reply = `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}". Tuy nhi√™n, ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m t∆∞∆°ng t·ª±:\n`;
                    reply += '<div class="product-grid">';
                    similarProducts.forEach(product => {
                        reply += `
                            <div class="product-card">
                                <img src="/images/${product.image_url}" class="product-image">
                                <div class="product-info">
                                    <h3>${product.name}</h3>
                                    <p>${formatPrice(product.price)}</p>
                                    <button class="buy-btn">Mua ngay</button>
                                </div>
                            </div>
                        `;
                    });
                    reply += '</div>';
                } else {
                    reply = `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}". B·∫°n c√≥ mu·ªën t√¨m s·∫£n ph·∫©m kh√°c kh√¥ng?`;
                }
                res.json({ _text: reply, imageUrl: null, showButtons: false });
                return;
            }
        } else if (intent === 'tu_van_san_pham') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    if (!context.consultation.purpose) {
                        reply = `Ch√†o b·∫°n! M√¨nh r·∫•t vui ƒë∆∞·ª£c t∆∞ v·∫•n cho b·∫°n v·ªÅ ${product.name} (${product.brand}). ƒê·ªÉ m√¨nh gi√∫p b·∫°n t√¨m ra l·ª±a ch·ªçn ph√π h·ª£p nh·∫•t, m√¨nh c·∫ßn h·ªèi th√™m m·ªôt v√†i th√¥ng tin nh√©!\n\n` +
                                "1. B·∫°n th∆∞·ªùng s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i cho nh·ªØng m·ª•c ƒë√≠ch ch√≠nh n√†o ·∫°? (V√≠ d·ª•: Ch·ª•p ·∫£nh, ch∆°i game, xem phim, l√†m vi·ªác,...)\n" +
                                "H√£y tr·∫£ l·ªùi ƒë·ªÉ m√¨nh ti·∫øp t·ª•c t∆∞ v·∫•n nh√©!";
                        context.consultation = { purpose: null, budget: null, feature: null, color: null };
                        imageUrl = `/images/${product.image_url}`;
                        res.json({ _text: reply, imageUrl: imageUrl || null, showButtons: false });
                        return;
                    } else if (!context.consultation.budget) {
                        context.consultation.purpose = userMessage;
                        reply = "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! B·∫°n c√≥ ng√¢n s√°ch kho·∫£ng bao nhi√™u cho chi·∫øc ƒëi·ªán tho·∫°i n√†y ·∫°? (V√≠ d·ª•: 10 tri·ªáu, 20 tri·ªáu,...)\n";
                        imageUrl = `/images/${product.image_url}`;
                        res.json({ _text: reply, imageUrl: imageUrl || null, showButtons: false });
                        return;
                    } else if (!context.consultation.feature) {
                        context.consultation.budget = userMessage;
                        reply = "C·∫£m ∆°n b·∫°n! B·∫°n ƒë·∫∑c bi·ªát quan t√¢m ƒë·∫øn y·∫øu t·ªë n√†o nh·∫•t? (V√≠ d·ª•: Camera, hi·ªáu nƒÉng, th·ªùi l∆∞·ª£ng pin,...)\n";
                        imageUrl = `/images/${product.image_url}`;
                        res.json({ _text: reply, imageUrl: imageUrl || null, showButtons: false });
                        return;
                    } else if (!context.consultation.color) {
                        context.consultation.feature = userMessage;
                        reply = "C·∫£m ∆°n b·∫°n! B·∫°n th√≠ch m√†u s·∫Øc n√†o ·∫°? (V√≠ d·ª•: ƒêen, tr·∫Øng, xanh,...)\n";
                        imageUrl = `/images/${product.image_url}`;
                        res.json({ _text: reply, imageUrl: imageUrl || null, showButtons: false });
                        return;
                    } else {
                        context.consultation.color = userMessage;
                        reply = `D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p:\n` +
                                `- M·ª•c ƒë√≠ch s·ª≠ d·ª•ng: ${context.consultation.purpose}\n` +
                                `- Ng√¢n s√°ch: ${context.consultation.budget}\n` +
                                `- Y·∫øu t·ªë quan t√¢m: ${context.consultation.feature}\n` +
                                `- M√†u s·∫Øc: ${context.consultation.color}\n` +
                                `M√¨nh th·∫•y **${product.name}** r·∫•t ph√π h·ª£p v·ªõi b·∫°n. B·∫°n c√≥ mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†y kh√¥ng?`;
                        context.consultation = { purpose: null, budget: null, feature: null, color: null };
                        context.lastProduct = product;
                        context.lastBrand = product.brand;
                        imageUrl = `/images/${product.image_url}`;
                        showButtons = true;
                        res.json({ _text: reply, imageUrl: imageUrl || null, showButtons });
                        return;
                    }
                } else {
                    reply = `‚ùå R·∫•t ti·∫øc, m√¨nh kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ s·∫£n ph·∫©m "${targetProductName}" trong c∆° s·ªü d·ªØ li·ªáu. B·∫°n c√≥ mu·ªën t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m kh√°c kh√¥ng?`;
                    res.json({ _text: reply });
                    return;
                }
            } else {
                reply = 'B·∫°n mu·ªën t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m n√†o? V√≠ d·ª•: "T∆∞ v·∫•n iPhone 14"';
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'hoi_khuyen_mai') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    reply = product.promotion_names
                        ? `üéÅ S·∫£n ph·∫©m **${product.name}** hi·ªán c√≥ khuy·∫øn m√£i: ${product.promotion_names}. \n` +
                          `B·∫°n c√≥ mu·ªën ƒë·∫∑t mua s·∫£n ph·∫©m n√†y kh√¥ng?`
                        : `‚ùå Hi·ªán t·∫°i **${product.name}** kh√¥ng c√≥ khuy·∫øn m√£i n√†o. \n` +
                          `B·∫°n c√≥ mu·ªën xem c√°c s·∫£n ph·∫©m kh√°c ƒëang c√≥ khuy·∫øn m√£i kh√¥ng?`;
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                } else {
                    reply = `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}". B·∫°n c√≥ mu·ªën h·ªèi khuy·∫øn m√£i c·ªßa s·∫£n ph·∫©m kh√°c kh√¥ng?`;
                    context.lastProduct = null;
                }
            } else {
                reply = 'B·∫°n mu·ªën h·ªèi khuy·∫øn m√£i c·ªßa s·∫£n ph·∫©m n√†o? V√≠ d·ª•: "iPhone 14 c√≥ khuy·∫øn m√£i g√¨ kh√¥ng?"';
            }
        } else if (intent === 'hoi_bao_hanh') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    reply = `üõ°Ô∏è S·∫£n ph·∫©m **${product.name}** c√≥ th·ªùi gian b·∫£o h√†nh: ${product.warranty_period ? `${product.warranty_period} th√°ng` : 'Kh√¥ng c√≥ th√¥ng tin'}. \n` +
                            `B·∫°n c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin kh√°c v·ªÅ s·∫£n ph·∫©m n√†y kh√¥ng?`;
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                } else {
                    reply = `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}". B·∫°n c√≥ mu·ªën h·ªèi b·∫£o h√†nh c·ªßa s·∫£n ph·∫©m kh√°c kh√¥ng?`;
                    context.lastProduct = null;
                }
            } else {
                reply = 'B·∫°n mu·ªën h·ªèi b·∫£o h√†nh c·ªßa s·∫£n ph·∫©m n√†o? V√≠ d·ª•: "B·∫£o h√†nh c·ªßa Galaxy S23 bao l√¢u?"';
            }
        } else if (intent === 'tim_kiem_theo_thuong_hieu') {
            let targetBrand = brand || context.lastBrand || extractBrandFromMessage(userMessage);

            if (targetBrand) {
                const products = await findProductsByBrand(targetBrand);
        
                if (products.length > 0) {
                    reply = `üìã D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m c·ªßa ${targetBrand} b√™n m√¨nh hi·ªán ƒëang c√≥:\n`;
                    reply += '<div class="product-grid">';
                    products.forEach(product => {
                        reply += `
                            <div class="product-card">
                                <img src="/images/${product.image_url}" class="product-image">
                                <div class="product-info">
                                    <h3>${product.name}</h3>
                                    <p>${formatPrice(product.price)}</p>
                                    <button class="buy-btn">Ch·ªçn m·∫´u n√†y</button>
                                </div>
                            </div>
                        `;
                    });
                    reply += '</div>';
                    reply += `\nAnh/ch·ªã c√≥ ·∫•n t∆∞·ª£ng v·ªõi m·∫´u n√†o kh√¥ng ·∫°?`;
        
                    context.lastBrand = targetBrand;
                    context.lastProduct = null;
                    context.awaitingProductChoice = true; // th√™m c·ªù n√†y ƒë·ªÉ ƒë·ª£i user ph·∫£n h·ªìi l·ª±a ch·ªçn
        
                    res.json({ _text: reply, imageUrl: null, showButtons: false, products });
                    return;
                } else {
                    reply = `‚ùå Hi·ªán t·∫°i c·ª≠a h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m n√†o thu·ªôc th∆∞∆°ng hi·ªáu ${targetBrand}.`;
                    context.lastBrand = null;
                }
            } else {
                reply = 'B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu n√†o? V√≠ d·ª•: "C√≥ s·∫£n ph·∫©m n√†o c·ªßa iPhone kh√¥ng?"';
            }
        
        } else if (intent === 'hoi_gia') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    reply = `üí∞ Gi√° c·ªßa **${product.name}** l√†: ${formatPrice(product.price)}. \n` +
                            `B·∫°n c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin kh√°c v·ªÅ s·∫£n ph·∫©m n√†y kh√¥ng?`;
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                } else {
                    reply = `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}". B·∫°n c√≥ mu·ªën h·ªèi gi√° s·∫£n ph·∫©m kh√°c kh√¥ng?`;
                    context.lastProduct = null;
                }
            } else {
                reply = 'B·∫°n mu·ªën h·ªèi gi√° c·ªßa s·∫£n ph·∫©m n√†o? V√≠ d·ª•: "iPhone 14 gi√° bao nhi√™u?"';
            }
        } else if (intent === 'hoi_mau_sac') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    reply = `üé® S·∫£n ph·∫©m **${product.name}** c√≥ c√°c m√†u: ${product.colors || 'Kh√¥ng c√≥ th√¥ng tin'}. \n` +
                            `B·∫°n c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin kh√°c v·ªÅ s·∫£n ph·∫©m n√†y kh√¥ng?`;
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                } else {
                    reply = `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}". B·∫°n c√≥ mu·ªën h·ªèi m√†u s·∫Øc c·ªßa s·∫£n ph·∫©m kh√°c kh√¥ng?`;
                    context.lastProduct = null;
                }
            } else {
                reply = 'B·∫°n mu·ªën h·ªèi m√†u s·∫Øc c·ªßa s·∫£n ph·∫©m n√†o? V√≠ d·ª•: "iPhone 14 c√≥ m√†u g√¨?"';
            }
        } else if (intent === 'hoi_tra_gop') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    reply = `üìÖ S·∫£n ph·∫©m **${product.name}** h·ªó tr·ª£ tr·∫£ g√≥p 0% l√£i su·∫•t trong 6 th√°ng. \n` +
                            `B·∫°n c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin v·ªÅ tr·∫£ g√≥p ho·∫∑c ƒë·∫∑t mua s·∫£n ph·∫©m n√†y kh√¥ng?`;
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                } else {
                    reply = `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}". B·∫°n c√≥ mu·ªën h·ªèi tr·∫£ g√≥p c·ªßa s·∫£n ph·∫©m kh√°c kh√¥ng?`;
                    context.lastProduct = null;
                }
            } else {
                reply = 'B·∫°n mu·ªën h·ªèi tr·∫£ g√≥p c·ªßa s·∫£n ph·∫©m n√†o? V√≠ d·ª•: "iPhone 14 c√≥ tr·∫£ g√≥p kh√¥ng?"';
            }
        } else if (intent === 'so_sanh_san_pham') {
            const productName1 = witResponse.entities?.['product_name:product_name']?.[0]?.value || null;
            const productName2 = witResponse.entities?.['product_name:product_name']?.[1]?.value || null;

            if (productName1 && productName2) {
                const comparison = await compareProducts(productName1, productName2);
                if (comparison) {
                    const { product1, product2 } = comparison;
                    reply = `üìä So s√°nh **${product1.name}** v√† **${product2.name}**:\n` +
                            `- **Gi√°**: ${formatPrice(product1.price)} vs ${formatPrice(product2.price)}\n` +
                            `- **M√†u s·∫Øc**: ${product1.colors || 'Kh√¥ng c√≥ th√¥ng tin'} vs ${product2.colors || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                            `- **L∆∞u tr·ªØ**: ${product1.storage || 'Kh√¥ng c√≥ th√¥ng tin'} vs ${product2.storage || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                            `- **T√≠nh nƒÉng**: ${product1.features || 'Kh√¥ng c√≥ th√¥ng tin'} vs ${product2.features || 'Kh√¥ng c√≥ th√¥ng tin'}\n` +
                            `B·∫°n c√≥ mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?`;
                    context.lastProduct = null;
                    context.lastBrand = null;
                } else {
                    reply = `‚ùå Kh√¥ng th·ªÉ so s√°nh v√¨ kh√¥ng t√¨m th·∫•y m·ªôt trong hai s·∫£n ph·∫©m "${productName1}" ho·∫∑c "${productName2}".`;
                }
            } else {
                reply = 'B·∫°n mu·ªën so s√°nh s·∫£n ph·∫©m n√†o? V√≠ d·ª•: "So s√°nh iPhone 14 v√† Galaxy S23"';
            }
        } else if (intent === 'tim_kiem_thuong_hieu_gia') {
            let targetBrand = brand || context.lastBrand;
            if (targetBrand) {
                const regexRange = /t·ª´\s+(\d+)\s+ƒë·∫øn\s+(\d+)\s+tri·ªáu/i;
                const regexBelow = /d∆∞·ªõi\s+(\d+)\s+tri·ªáu/i;
                const regexAbove = /tr√™n\s+(\d+)\s+tri·ªáu/i;

                const matchRange = userMessage.match(regexRange);
                const matchBelow = userMessage.match(regexBelow);
                const matchAbove = userMessage.match(regexAbove);

                let minPrice = 0;
                let maxPrice = Infinity;

                if (matchRange) {
                    minPrice = parseInt(matchRange[1]) * 1000000;
                    maxPrice = parseInt(matchRange[2]) * 1000000;
                } else if (matchBelow) {
                    maxPrice = parseInt(matchBelow[1]) * 1000000;
                } else if (matchAbove) {
                    minPrice = parseInt(matchAbove[1]) * 1000000;
                    maxPrice = 999999999;
                } else {
                    reply = "‚ùå Xin l·ªói, t√¥i kh√¥ng th·ªÉ hi·ªÉu r√µ kho·∫£ng gi√° b·∫°n mu·ªën t√¨m. B·∫°n c√≥ th·ªÉ h·ªèi nh∆∞: 'C√≥ s·∫£n ph·∫©m Samsung n√†o d∆∞·ªõi 10 tri·ªáu kh√¥ng?'";
                    res.json({ _text: reply });
                    return;
                }

                if (isNaN(minPrice) || isNaN(maxPrice) || minPrice > maxPrice) {
                    reply = "‚ùå Kho·∫£ng gi√° kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!";
                    res.json({ _text: reply });
                    return;
                }

                const products = await findProductsByPriceRange(minPrice, maxPrice, targetBrand);
                if (products.length > 0) {
                    reply = `üìã **C√°c s·∫£n ph·∫©m c·ªßa ${targetBrand} trong kho·∫£ng gi√° t·ª´ ${formatPrice(minPrice)} ƒë·∫øn ${formatPrice(maxPrice)}**:\n`;
                    reply += '<div class="product-grid">';
                    products.forEach(product => {
                        reply += `
                            <div class="product-card">
                                <img src="/images/${product.image_url}" class="product-image">
                                <div class="product-info">
                                    <h3>${product.name}</h3>
                                    <p>${formatPrice(product.price)}</p>
                                    <button class="buy-btn">Mua ngay</button>
                                </div>
                            </div>
                        `;
                    });
                    reply += '</div>';
                    reply += `\nB·∫°n c√≥ mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?`;
                    context.lastBrand = targetBrand;
                    context.lastProduct = null;
                    res.json({ _text: reply, imageUrl: null, showButtons: false, products });
                    return;
                } else {
                    reply = `‚ùå Hi·ªán t·∫°i c·ª≠a h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m n√†o c·ªßa ${targetBrand} trong kho·∫£ng gi√° t·ª´ ${formatPrice(minPrice)} ƒë·∫øn ${formatPrice(maxPrice)}. \n` +
                            `B·∫°n c√≥ mu·ªën xem c√°c th∆∞∆°ng hi·ªáu kh√°c kh√¥ng?`;
                    context.lastBrand = null;
                    res.json({ _text: reply, imageUrl: null, showButtons: false });
                    return;
                }
            } else {
                reply = 'B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu n√†o? V√≠ d·ª•: "C√≥ s·∫£n ph·∫©m Samsung n√†o d∆∞·ªõi 10 tri·ªáu kh√¥ng?"';
                res.json({ _text: reply, imageUrl: null, showButtons: false });
                return;
            }
        } else if (intent === 'tim_kiem_thuong_hieu_mau') {
            let targetBrand = brand || context.lastBrand;
            if (targetBrand && color) {
                const products = await findProductsByBrand(targetBrand, null, color);
                if (products.length > 0) {
                    reply = `üìã **C√°c s·∫£n ph·∫©m c·ªßa ${targetBrand} m√†u ${color}**:\n`;
                    reply += '<div class="product-grid">';
                    products.forEach(product => {
                        reply += `
                            <div class="product-card">
                                <img src="/images/${product.image_url}" class="product-image">
                                <div class="product-info">
                                    <h3>${product.name}</h3>
                                    <p>${formatPrice(product.price)}</p>
                                    <button class="buy-btn">Mua ngay</button>
                                </div>
                            </div>
                        `;
                    });
                    reply += '</div>';
                    reply += `\nB·∫°n c√≥ mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?`;
                    context.lastBrand = targetBrand;
                    context.lastProduct = null;
                    res.json({ _text: reply, imageUrl: null, showButtons: false, products });
                    return;
                } else {
                    reply = `‚ùå Hi·ªán t·∫°i c·ª≠a h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m n√†o c·ªßa ${targetBrand} m√†u ${color}. \n` +
                            `B·∫°n c√≥ mu·ªën xem c√°c m√†u kh√°c kh√¥ng?`;
                    context.lastBrand = null;
                    res.json({ _text: reply, imageUrl: null, showButtons: false });
                    return;
                }
            } else {
                reply = 'B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu n√†o v√† m√†u g√¨? V√≠ d·ª•: "C√≥ s·∫£n ph·∫©m Samsung m√†u ƒëen kh√¥ng?"';
                res.json({ _text: reply, imageUrl: null, showButtons: false });
                return;
            }
        }  else if (intent === 'hoi_mau_san_pham') {
            let targetBrand = brand || extractBrandFromMessage(userMessage);
        
            // Chu·∫©n h√≥a t√™n th∆∞∆°ng hi·ªáu n·∫øu ng∆∞·ªùi d√πng n√≥i "iPhone"
            if (targetBrand && targetBrand.toLowerCase() === 'iphone') {
                targetBrand = 'Apple';
            }
        
            if (targetBrand) {
                const products = await findProductsByBrand(targetBrand);
        
                if (products.length > 0) {
                    reply = `üì¶ D·∫° c√≥ ·∫°! Hi·ªán b√™n m√¨nh ƒëang b√°n c√°c m·∫´u **${targetBrand}** sau:\n`;
                    reply += '<div class="product-grid">';
                    products.forEach(product => {
                        reply += `
                            <div class="product-card">
                                <img src="/images/${product.image_url}" class="product-image">
                                <div class="product-info">
                                    <h3>${product.name}</h3>
                                    <p>${formatPrice(product.price)}</p>
                                    <button class="buy-btn" data-product-name="${product.name}">Ch·ªçn m·∫´u n√†y</button>
                                </div>
                            </div>
                        `;
                    });
                    reply += '</div>';
                    reply += `\nüëâ Anh/ch·ªã c√≥ ·∫•n t∆∞·ª£ng v·ªõi m·∫´u n√†o kh√¥ng ·∫°?`;
        
                    context.lastBrand = targetBrand;
                    context.lastProduct = null;
                    context.awaitingProductChoice = true;
        
                    return res.json({ _text: reply, imageUrl: null, showButtons: false });
                } else {
                    reply = `‚ùå D·∫° hi·ªán t·∫°i b√™n m√¨nh ch∆∞a c√≥ m·∫´u ƒëi·ªán tho·∫°i n√†o c·ªßa **${targetBrand}**.\nüëâ Anh/ch·ªã mu·ªën xem s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu kh√°c kh√¥ng ·∫°?`;
                    context.lastBrand = null;
                    return res.json({ _text: reply });
                }
            } else {
                reply = 'B·∫°n ƒëang mu·ªën t√¨m ƒëi·ªán tho·∫°i c·ªßa th∆∞∆°ng hi·ªáu n√†o ·∫°? V√≠ d·ª•: "Shop c√≥ b√°n iPhone kh√¥ng?"';
                return res.json({ _text: reply });
            }
                  
        } else if (intent === 'hoi_nguyen_mai') {
            reply = 'Hi·ªán t·∫°i, t·∫•t c·∫£ s·∫£n ph·∫©m t·∫°i c·ª≠a h√†ng ƒë·ªÅu l√† h√†ng nguy√™n seal, m·ªõi 100%. B·∫°n c√≥ mu·ªën xem th√¥ng tin chi ti·∫øt c·ªßa s·∫£n ph·∫©m n√†o kh√¥ng?';
        } else if (intent === 'hoi_tinh_trang_hang') {
            reply = 'T·∫•t c·∫£ s·∫£n ph·∫©m t·∫°i c·ª≠a h√†ng ƒë·ªÅu l√† h√†ng ch√≠nh h√£ng, m·ªõi 100% v√† c√≤n nguy√™n b·∫£o h√†nh. B·∫°n c√≥ mu·ªën xem th√¥ng tin chi ti·∫øt c·ªßa s·∫£n ph·∫©m n√†o kh√¥ng?';
        } else {
            // N·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c intent, s·ª≠ d·ª•ng DeepSeek AI ƒë·ªÉ tr·∫£ l·ªùi d·ª±a tr√™n ng·ªØ c·∫£nh
            const contextPrompt = {
                lastProduct: context.lastProduct?.name || 'kh√¥ng c√≥ s·∫£n ph·∫©m',
                lastBrand: context.lastBrand || 'kh√¥ng c√≥ th∆∞∆°ng hi·ªáu',
                lastIntent: context.lastIntent || 'kh√¥ng c√≥ intent',
                history: context.history.slice(-3),
                consultation: context.consultation
            };
            reply = await getDeepSeekResponse(userMessage, contextPrompt);
            context.lastProduct = null;
            context.lastBrand = null;
        }

        // L∆∞u v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i
        context.lastIntent = intent;
        context.history.push({ intent, productName, brand, userMessage, reply });
        if (context.history.length > 10) context.history.shift();

        console.log(`ü§ñ Bot: ${reply}`);
        
        res.json({ _text: reply, imageUrl, showButtons, products });
    } catch (error) {
        console.error("‚ùå L·ªói t·ªïng qu√°t trong chatbot:", error);
        res.status(500).json({ _text: "‚ùå Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!", imageUrl: null, showButtons: false });
    }
});

// Ch·∫°y server
app.listen(PORT, () => {
    console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i: http://localhost:${PORT}`);
});