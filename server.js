require('dotenv').config();

const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const mysql = require('mysql2');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const path = require('path');
const multer = require('multer');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// Load API Keys t·ª´ .env
const WIT_AI_ACCESS_TOKEN = process.env.WIT_AI_ACCESS_TOKEN;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// Ki·ªÉm tra API Key
if (!GEMINI_API_KEY) {
    console.error('‚ùå L·ªñI: Ch∆∞a c√≥ GEMINI_API_KEY trong .env!');
    process.exit(1);
}
if (!WIT_AI_ACCESS_TOKEN) {
    console.error('‚ùå L·ªñI: Ch∆∞a c√≥ WIT_AI_ACCESS_TOKEN trong .env!');
    process.exit(1);
}

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// K·∫øt n·ªëi MySQL
const db = mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME
});

db.connect(err => {
    if (err) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MySQL:', err);
        process.exit(1);
    }
    console.log('‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!');
});

// C·∫•u h√¨nh multer ƒë·ªÉ upload file
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadPath = path.join(__dirname, 'public', 'images');
        if (!fs.existsSync(uploadPath)) {
            fs.mkdirSync(uploadPath, { recursive: true });
        }
        cb(null, uploadPath);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const ext = path.extname(file.originalname);
        cb(null, file.fieldname + '-' + uniqueSuffix + ext);
    }
});

const upload = multer({
    storage: storage,
    fileFilter: (req, file, cb) => {
        const filetypes = /jpeg|jpg|png/;
        const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
        const mimetype = filetypes.test(file.mimetype);
        if (extname && mimetype) {
            return cb(null, true);
        } else {
            cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (jpeg, jpg, png)!'));
        }
    },
    limits: { fileSize: 5 * 1024 * 1024 } // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file: 5MB
});

// Middleware
app.use(bodyParser.json());
app.use(express.static('public'));
app.use('/admin', express.static('admin'));
app.use('/images', express.static('public/images'));

// Route cho trang ch√≠nh (chatbot)
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Route cho trang qu·∫£n tr·ªã
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin', 'index.html'));
});

// H√†m ƒë·ªãnh d·∫°ng gi√° theo chu·∫©n Vi·ªát Nam
function formatPrice(price) {
    return price.toLocaleString('vi-VN', { minimumFractionDigits: 0, maximumFractionDigits: 0 }) + ' VNƒê';
}

// H√†m truy v·∫•n SQL v·ªõi Promise
const query = (sql, params) => {
    return new Promise((resolve, reject) => {
        console.log('üìã Truy v·∫•n SQL:', sql);
        console.log('üìã Tham s·ªë:', params);
        db.query(sql, params, (err, results) => {
            if (err) {
                console.error('‚ùå L·ªói truy v·∫•n MySQL:', err);
                reject(err);
            } else {
                resolve(results);
            }
        });
    });
};

// API l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ MySQL (th√™m ph√¢n trang, t√¨m ki·∫øm, l·ªçc)
app.get('/products', async (req, res) => {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;
    const search = req.query.search || '';
    const minPrice = parseFloat(req.query.minPrice) || 0;
    let maxPrice = parseFloat(req.query.maxPrice) || Infinity;
    const brand = req.query.brand || '';

    if (maxPrice === Infinity || isNaN(maxPrice)) {
        maxPrice = 999999999;
    }
    if (isNaN(minPrice)) {
        minPrice = 0;
    }

    let whereConditions = [
        `(LOWER(p.name) LIKE LOWER(?) OR LOWER(p.brand) LIKE LOWER(?))`,
        `p.price BETWEEN ? AND ?`
    ];
    let params = [`%${search}%`, `%${search}%`, minPrice, maxPrice];

    if (brand) {
        whereConditions.push(`p.brand = ?`);
        params.push(brand);
    }

    const whereClause = whereConditions.join(' AND ');

    try {
        const products = await query(
            `SELECT p.*, 
                    (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ') 
                     FROM promotions 
                     WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                    (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ') 
                     FROM features 
                     WHERE product_id = p.product_id) AS features
             FROM products p 
             WHERE ${whereClause}
             LIMIT ? OFFSET ?`,
            [...params, limit, offset]
        );

        const formattedProducts = products.map(product => ({
            ...product,
            formattedPrice: formatPrice(product.price)
        }));

        const totalResult = await query(
            `SELECT COUNT(*) as total 
             FROM products p 
             WHERE ${whereClause}`,
            [...params]
        );

        const total = totalResult && totalResult.length > 0 ? totalResult[0].total : 0;

        res.json({ products: formattedProducts, total, page, limit });
    } catch (err) {
        res.status(500).json({ error: 'L·ªói truy v·∫•n d·ªØ li·ªáu.', details: err.message });
    }
});

// API th√™m s·∫£n ph·∫©m (c√≥ upload h√¨nh ·∫£nh)
app.post('/admin/products', upload.single('image'), async (req, res) => {
    const { name, brand, description, price, colors, storage, release_date, warranty_period } = req.body;
    const image_url = req.file ? req.file.filename : null;

    if (!name || !brand || !price) {
        return res.status(400).json({ error: 'T√™n, th∆∞∆°ng hi·ªáu v√† gi√° l√† b·∫Øt bu·ªôc.' });
    }

    try {
        await query(
            `INSERT INTO products (name, brand, description, price, colors, storage, release_date, warranty_period, image_url) 
             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [name, brand, description, price, colors, storage, release_date, warranty_period, image_url]
        );
        res.json({ message: 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        res.status(500).json({ error: 'L·ªói khi th√™m s·∫£n ph·∫©m.', details: err.message });
    }
});

// API s·ª≠a s·∫£n ph·∫©m (c√≥ upload h√¨nh ·∫£nh)
app.put('/admin/products/:id', upload.single('image'), async (req, res) => {
    const productId = req.params.id;
    const { name, brand, description, price, colors, storage, release_date, warranty_period } = req.body;
    const image_url = req.file ? req.file.filename : req.body.image_url;

    if (!name || !brand || !price) {
        return res.status(400).json({ error: 'T√™n, th∆∞∆°ng hi·ªáu v√† gi√° l√† b·∫Øt bu·ªôc.' });
    }

    try {
        if (req.file) {
            const oldProduct = await query(
                `SELECT image_url FROM products WHERE product_id = ?`,
                [productId]
            );
            if (oldProduct[0]?.image_url) {
                const oldImagePath = path.join(__dirname, 'public', 'images', oldProduct[0].image_url);
                if (fs.existsSync(oldImagePath)) {
                    fs.unlinkSync(oldImagePath);
                }
            }
        }

        const result = await query(
            `UPDATE products 
             SET name = ?, brand = ?, description = ?, price = ?, colors = ?, storage = ?, release_date = ?, warranty_period = ?, image_url = ? 
             WHERE product_id = ?`,
            [name, brand, description, price, colors, storage, release_date, warranty_period, image_url, productId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.' });
        }

        res.json({ message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        res.status(500).json({ error: 'L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m.', details: err.message });
    }
});

// API x√≥a s·∫£n ph·∫©m
app.delete('/admin/products/:id', async (req, res) => {
    const productId = req.params.id;

    try {
        const product = await query(
            `SELECT image_url FROM products WHERE product_id = ?`,
            [productId]
        );
        if (product[0]?.image_url) {
            const imagePath = path.join(__dirname, 'public', 'images', product[0].image_url);
            if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
            }
        }

        const result = await query(
            `DELETE FROM products WHERE product_id = ?`,
            [productId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.' });
        }

        res.json({ message: 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!' });
    } catch (err) {
        res.status(500).json({ error: 'L·ªói khi x√≥a s·∫£n ph·∫©m.', details: err.message });
    }
});

// H√†m g·ªçi API Wit.ai
async function getWitResponse(message) {
    try {
        const response = await axios.get(
            `https://api.wit.ai/message?v=20220201&q=${encodeURIComponent(message)}`,
            {
                headers: { Authorization: `Bearer ${WIT_AI_ACCESS_TOKEN}` }
            }
        );
        return response.data;
    } catch (error) {
        console.error('‚ùå L·ªói t·ª´ Wit.ai:', error.response?.data || error.message);
        return null;
    }
}

// H√†m g·ªçi Gemini AI
async function getGeminiResponse(prompt) {
    try {
        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
        const result = await model.generateContent(prompt);
        return result.response.text();
    } catch (error) {
        console.error('‚ùå L·ªói t·ª´ Gemini AI:', error.response?.data || error.message);
        return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay b√¢y gi·ªù. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i ho·∫∑c cung c·∫•p th√™m th√¥ng tin kh√¥ng?';
    }
}

// H√†m l·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ MySQL
async function getProductInfo(productName) {
    try {
        const results = await query(
            `SELECT p.*, 
                    (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ') 
                     FROM promotions 
                     WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                    (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ') 
                     FROM features 
                     WHERE product_id = p.product_id) AS features
             FROM products p 
             WHERE LOWER(p.name) LIKE LOWER(?)`,
            [`%${productName}%`]
        );
        return results[0] || null;
    } catch (err) {
        console.error('‚ùå L·ªói l·∫•y th√¥ng tin s·∫£n ph·∫©m:', err);
        return null;
    }
}

// H√†m t√¨m s·∫£n ph·∫©m theo kho·∫£ng gi√°
async function findProductsByPriceRange(minPrice, maxPrice, productName = null) {
    try {
        let sql = `
            SELECT p.*,
                   (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ')
                     FROM promotions
                     WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                   (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ')
                     FROM features
                     WHERE product_id = p.product_id) AS features
            FROM products p
            WHERE p.price BETWEEN ? AND ?
        `;
        const params = [minPrice, maxPrice];

        if (productName) {
            sql += ` AND LOWER(p.name) LIKE LOWER(?)`;
            params.push(`%${productName}%`);
        }

        return await query(sql, params);
    } catch (err) {
        console.error('‚ùå L·ªói t√¨m s·∫£n ph·∫©m theo gi√°:', err);
        throw err;
    }
}

// H√†m t√¨m s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
async function findProductsByBrand(brand, feature = null, color = null) {
    try {
        let sql = `SELECT p.*, 
                          (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ') 
                           FROM promotions 
                           WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                          (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ') 
                           FROM features 
                           WHERE product_id = p.product_id) AS features
                   FROM products p 
                   WHERE p.brand = ?`;
        let params = [brand];

        if (feature) {
            sql += ` AND EXISTS (
                        SELECT 1 
                        FROM features f 
                        WHERE f.product_id = p.product_id 
                        AND LOWER(f.feature_name) LIKE LOWER(?)
                    )`;
            params.push(`%${feature}%`);
        }

        if (color) {
            sql += ` AND LOWER(p.colors) LIKE LOWER(?)`;
            params.push(`%${color}%`);
        }

        return await query(sql, params);
    } catch (err) {
        console.error('‚ùå L·ªói t√¨m s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu:', err);
        return [];
    }
}

// H√†m so s√°nh hai s·∫£n ph·∫©m
async function compareProducts(productName1, productName2) {
    try {
        const product1 = await getProductInfo(productName1);
        const product2 = await getProductInfo(productName2);

        if (!product1 || !product2) {
            return null;
        }

        return { product1, product2 };
    } catch (err) {
        console.error('‚ùå L·ªói so s√°nh s·∫£n ph·∫©m:', err);
        return null;
    }
}

// H√†m t√¨m th∆∞∆°ng hi·ªáu trong c√¢u h·ªèi n·∫øu Wit.ai kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c
function extractBrandFromMessage(message) {
    const brands = ['vivo', 'oppo', 'samsung', 'apple', 'xiaomi', 'iphone'];
    const messageLower = message.toLowerCase();
    for (const brand of brands) {
        if (messageLower.includes(brand)) {
            return brand.charAt(0).toUpperCase() + brand.slice(1);
        }
    }
    return null;
}

// H√†m g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±
async function suggestSimilarProducts(brand, excludeProductName) {
    try {
        const products = await query(
            `SELECT p.*,
                    (SELECT GROUP_CONCAT(promotion_name SEPARATOR '; ') 
                     FROM promotions 
                     WHERE product_id = p.product_id OR product_id IS NULL) AS promotion_names,
                    (SELECT GROUP_CONCAT(feature_name SEPARATOR '; ') 
                     FROM features 
                     WHERE product_id = p.product_id) AS features
             FROM products p 
             WHERE p.brand = ? AND LOWER(p.name) NOT LIKE LOWER(?)
             LIMIT 3`,
            [brand, `%${excludeProductName}%`]
        );
        return products;
    } catch (err) {
        console.error('‚ùå L·ªói g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±:', err);
        return [];
    }
}

// ƒê·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ ng·ªØ c·∫£nh cho m·ªói phi√™n
const conversationContext = {};

// Middleware ƒë·ªÉ t·∫°o ho·∫∑c l·∫•y ng·ªØ c·∫£nh cho m·ªói phi√™n
app.use((req, res, next) => {
    const sessionId = req.headers['session-id'] || req.query.sessionId || req.body.sessionId;

    if (!sessionId) {
        return res.status(400).json({ error: 'Session ID is required' });
    }

    if (!conversationContext[sessionId]) {
        conversationContext[sessionId] = {
            lastProduct: null,
            lastBrand: null,
            lastIntent: null,
            pendingOrder: null,
            history: [],
            consultation: { purpose: null, budget: null, feature: null, color: null },
            awaitingProductChoice: false
        };
    }
    req.context = conversationContext[sessionId];
    req.sessionId = sessionId;
    next();
});

// API x·ª≠ l√Ω chatbot
app.post('/chatbot', async (req, res) => {
    const userMessage = req.body.message.toLowerCase();
    const sessionId = req.sessionId;
    const context = req.context;

    console.log(`üì© User: ${userMessage} (Session: ${sessionId})`);

    // Reset awaitingProductChoice n·∫øu ƒë√¢y l√† c√¢u h·ªèi m·ªõi kh√¥ng li√™n quan ƒë·∫øn th∆∞∆°ng hi·ªáu tr∆∞·ªõc
    if (!context.awaitingProductChoice || !userMessage.includes(context.lastBrand?.toLowerCase())) {
        context.awaitingProductChoice = false;
    }

    if (context.awaitingProductChoice) {
        const targetProduct = await getProductInfo(userMessage);
        if (targetProduct) {
            const productData = {
                name: targetProduct.name,
                brand: targetProduct.brand,
                description: targetProduct.description || 'Ch∆∞a c√≥ m√¥ t·∫£',
                price: formatPrice(targetProduct.price),
                colors: targetProduct.colors || 'Kh√¥ng c√≥ th√¥ng tin',
                storage: targetProduct.storage || 'Kh√¥ng c√≥ th√¥ng tin',
                release_date: targetProduct.release_date || 'Kh√¥ng c√≥ th√¥ng tin',
                warranty_period: targetProduct.warranty_period ? `${targetProduct.warranty_period} th√°ng` : 'Kh√¥ng c√≥',
                promotion_names: targetProduct.promotion_names || '',
                features: targetProduct.features || ''
            };
            const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·∫£n ph·∫©m "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n v√† cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin, ƒë·ªìng th·ªùi h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën ƒë·∫∑t mua kh√¥ng.`;
            const reply = await getGeminiResponse(prompt);

            context.awaitingProductChoice = false;
            context.lastProduct = targetProduct;
            context.lastBrand = targetProduct.brand;

            return res.json({ _text: reply, imageUrl: `/images/${targetProduct.image_url}`, showButtons: true });
        } else {
            const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·∫£n ph·∫©m "${userMessage}", nh∆∞ng kh√¥ng t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, gi·∫£i th√≠ch r·∫±ng kh√¥ng t√¨m th·∫•y v√† g·ª£i √Ω ng∆∞·ªùi d√πng th·ª≠ l·∫°i.`;
            const reply = await getGeminiResponse(prompt);
            return res.json({ _text: reply });
        }
    }

    try {
        const witResponse = await getWitResponse(userMessage);
        if (!witResponse || !witResponse.intents) {
            const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng h·ªá th·ªëng kh√¥ng th·ªÉ nh·∫≠n di·ªán √Ω ƒë·ªãnh. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, xin l·ªói v√† g·ª£i √Ω ng∆∞·ªùi d√πng th·ª≠ l·∫°i ho·∫∑c cung c·∫•p th√™m th√¥ng tin.`;
            const reply = await getGeminiResponse(prompt);
            return res.json({ _text: reply });
        }

        const intent = witResponse.intents?.[0]?.name || null;
        let productName = witResponse.entities?.['product_name:product_name']?.[0]?.value || null;

        if (!productName || !userMessage.includes(productName.toLowerCase())) {
            productName = userMessage;
        }

        const priceRange = witResponse.entities?.['price_range:price_range']?.[0]?.value || null;
        const feature = witResponse.entities?.['feature:feature']?.[0]?.value || null;
        const color = witResponse.entities?.['color:color']?.[0]?.value || null;
        let brand = witResponse.entities?.['brand:brand']?.[0]?.value || extractBrandFromMessage(userMessage);

        if (brand && brand.toLowerCase() === 'iphone') {
            brand = 'Apple';
        }

        let reply = '';
        let imageUrl = null;
        let showButtons = false;
        let products = null;

        console.log('Intent:', intent);
        console.log('Product Name:', productName);
        console.log('Price Range:', priceRange);
        console.log('Feature:', feature);
        console.log('Color:', color);
        console.log('Brand:', brand);

        // X·ª≠ l√Ω khi intent l√† null nh∆∞ng c√≥ brand
        if (!intent && brand) {
            const products = await findProductsByBrand(brand);
            if (products.length > 0) {
                const productList = products.map(p => ({
                    name: p.name,
                    brand: p.brand,
                    price: formatPrice(p.price),
                    image_url: p.image_url
                }));
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu, c·ª≠a h√†ng c√≥ c√°c s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu ${brand}: ${JSON.stringify(productList)}. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, li·ªát k√™ s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng danh s√°ch v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën ch·ªçn m·∫´u n√†o kh√¥ng.`;
                reply = await getGeminiResponse(prompt);
                context.lastBrand = brand;
                context.lastProduct = null;
                context.awaitingProductChoice = true;
                res.json({ _text: reply, imageUrl: null, showButtons: false, products });
                return;
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c·ªßa th∆∞∆°ng hi·ªáu ${brand} trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng c√≥ s·∫£n ph·∫©m v√† g·ª£i √Ω h·ªèi v·ªÅ th∆∞∆°ng hi·ªáu kh√°c.`;
                reply = await getGeminiResponse(prompt);
                context.lastBrand = null;
                res.json({ _text: reply });
                return;
            }
        }

        // X·ª≠ l√Ω c√°c intent
        if (intent === 'tim_kiem_theo_gia') {
            const regexRange = /t·ª´\s+(\d+)\s+ƒë·∫øn\s+(\d+)\s+tri·ªáu/i;
            const regexBelow = /d∆∞·ªõi\s+(\d+)\s+tri·ªáu/i;
            const regexAbove = /tr√™n\s+(\d+)\s+tri·ªáu/i;
            const regexHave = /c√≥\s+(\d+)\s+tri·ªáu\s+mua\s+ƒë∆∞·ª£c/i;

            const matchRange = userMessage.match(regexRange);
            const matchBelow = userMessage.match(regexBelow);
            const matchAbove = userMessage.match(regexAbove);
            const matchHave = userMessage.match(regexHave);

            let minPrice = 0;
            let maxPrice = Infinity;

            if (priceRange) {
                const priceMatch = priceRange.match(/(\d+)/);
                if (priceMatch) {
                    maxPrice = parseInt(priceMatch[1]) * 1000000;
                }
            } else if (matchRange) {
                minPrice = parseInt(matchRange[1]) * 1000000;
                maxPrice = parseInt(matchRange[2]) * 1000000;
            } else if (matchBelow) {
                maxPrice = parseInt(matchBelow[1]) * 1000000;
            } else if (matchAbove) {
                minPrice = parseInt(matchAbove[1]) * 1000000;
                maxPrice = 999999999;
            } else if (matchHave) {
                maxPrice = parseInt(matchHave[1]) * 1000000;
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng th·ªÉ hi·ªÉu r√µ kho·∫£ng gi√° t·ª´ c√¢u h·ªèi. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, xin l·ªói v√† g·ª£i √Ω ng∆∞·ªùi d√πng cung c·∫•p th√™m th√¥ng tin v·ªÅ ng√¢n s√°ch, v√≠ d·ª•: "C√≥ ƒëi·ªán tho·∫°i n√†o d∆∞·ªõi 10 tri·ªáu kh√¥ng?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }

            if (isNaN(minPrice) || isNaN(maxPrice) || minPrice > maxPrice) {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kho·∫£ng gi√° kh√¥ng h·ª£p l·ªá. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o l·ªói v√† y√™u c·∫ßu ki·ªÉm tra l·∫°i.`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }

            const products = await findProductsByPriceRange(minPrice, maxPrice);
            if (products.length > 0) {
                const productList = products.map(p => ({
                    name: p.name,
                    brand: p.brand,
                    price: formatPrice(p.price),
                    image_url: p.image_url
                }));
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu, ƒë√¢y l√† c√°c s·∫£n ph·∫©m trong kho·∫£ng gi√° t·ª´ ${formatPrice(minPrice)} ƒë·∫øn ${formatPrice(maxPrice)}: ${JSON.stringify(productList)}. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, li·ªát k√™ s·∫£n ph·∫©m v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën ch·ªçn m·∫´u n√†o kh√¥ng.`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply, imageUrl: null, showButtons: false, products });
                return;
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong kho·∫£ng gi√° t·ª´ ${formatPrice(minPrice)} ƒë·∫øn ${formatPrice(maxPrice)}. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng c√≥ s·∫£n ph·∫©m v√† g·ª£i √Ω xem c√°c d√≤ng kh√°c.`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'thong_tin_san_pham') {
            let targetProductName = productName || context.lastProduct?.name;
            if (!targetProductName) {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c s·∫£n ph·∫©m n√†o. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ s·∫£n ph·∫©m, v√≠ d·ª•: "Th√¥ng tin iPhone 14".`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }

            const product = await getProductInfo(targetProductName);
            if (product) {
                const productData = {
                    name: product.name,
                    brand: product.brand,
                    description: product.description || 'Ch∆∞a c√≥ m√¥ t·∫£',
                    price: formatPrice(product.price),
                    colors: product.colors || 'Kh√¥ng c√≥ th√¥ng tin',
                    storage: product.storage || 'Kh√¥ng c√≥ th√¥ng tin',
                    release_date: product.release_date || 'Kh√¥ng c√≥ th√¥ng tin',
                    warranty_period: product.warranty_period ? `${product.warranty_period} th√°ng` : 'Kh√¥ng c√≥',
                    promotion_names: product.promotion_names || '',
                    features: product.features || ''
                };
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n, cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën ƒë·∫∑t mua kh√¥ng.`;
                reply = await getGeminiResponse(prompt);
                imageUrl = `/images/${product.image_url}`;
                showButtons = true;
                context.lastProduct = product;
                context.lastBrand = product.brand;
                res.json({ _text: reply, imageUrl, showButtons });
                return;
            } else {
                const similarProducts = await suggestSimilarProducts(brand || context.lastBrand || 'Apple', targetProductName);
                if (similarProducts.length > 0) {
                    const similarList = similarProducts.map(p => ({
                        name: p.name,
                        brand: p.brand,
                        price: formatPrice(p.price),
                        image_url: p.image_url
                    }));
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}", nh∆∞ng c√≥ c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª±: ${JSON.stringify(similarList)}. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† li·ªát k√™ s·∫£n ph·∫©m t∆∞∆°ng t·ª±.`;
                    reply = await getGeminiResponse(prompt);
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}" trong c∆° s·ªü d·ªØ li·ªáu v√† c≈©ng kh√¥ng c√≥ s·∫£n ph·∫©m t∆∞∆°ng t·ª±. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† g·ª£i √Ω t√¨m s·∫£n ph·∫©m kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                }
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'tu_van_san_pham') {
            let targetProductName = productName || context.lastProduct?.name;
            if (!targetProductName) {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng ch·ªâ r√µ s·∫£n ph·∫©m n√†o ƒë·ªÉ t∆∞ v·∫•n. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p t√™n s·∫£n ph·∫©m, v√≠ d·ª•: "T∆∞ v·∫•n iPhone 14".`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }

            const product = await getProductInfo(targetProductName);
            if (product) {
                const productData = {
                    name: product.name,
                    brand: product.brand,
                    description: product.description || 'Ch∆∞a c√≥ m√¥ t·∫£',
                    price: formatPrice(product.price),
                    colors: product.colors || 'Kh√¥ng c√≥ th√¥ng tin',
                    storage: product.storage || 'Kh√¥ng c√≥ th√¥ng tin',
                    release_date: product.release_date || 'Kh√¥ng c√≥ th√¥ng tin',
                    warranty_period: product.warranty_period ? `${product.warranty_period} th√°ng` : 'Kh√¥ng c√≥',
                    promotion_names: product.promotion_names || '',
                    features: product.features || ''
                };

                if (!context.consultation.purpose) {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n, ch√†o h·ªèi v√† h·ªèi ng∆∞·ªùi d√πng v·ªÅ m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i (v√≠ d·ª•: ch·ª•p ·∫£nh, ch∆°i game, xem phim, l√†m vi·ªác).`;
                    reply = await getGeminiResponse(prompt);
                    context.consultation = { purpose: null, budget: null, feature: null, color: null };
                    imageUrl = `/images/${product.image_url}`;
                    res.json({ _text: reply, imageUrl });
                    return;
                } else if (!context.consultation.budget) {
                    context.consultation.purpose = userMessage;
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng tr·∫£ l·ªùi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng: "${userMessage}". D·ª±a tr√™n s·∫£n ph·∫©m: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n, c·∫£m ∆°n v√† h·ªèi v·ªÅ ng√¢n s√°ch c·ªßa h·ªç (v√≠ d·ª•: 10 tri·ªáu, 20 tri·ªáu).`;
                    reply = await getGeminiResponse(prompt);
                    imageUrl = `/images/${product.image_url}`;
                    res.json({ _text: reply, imageUrl });
                    return;
                } else if (!context.consultation.feature) {
                    context.consultation.budget = userMessage;
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng tr·∫£ l·ªùi ng√¢n s√°ch: "${userMessage}". D·ª±a tr√™n s·∫£n ph·∫©m: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n, c·∫£m ∆°n v√† h·ªèi v·ªÅ t√≠nh nƒÉng h·ªç quan t√¢m (v√≠ d·ª•: camera, hi·ªáu nƒÉng, pin).`;
                    reply = await getGeminiResponse(prompt);
                    imageUrl = `/images/${product.image_url}`;
                    res.json({ _text: reply, imageUrl });
                    return;
                } else if (!context.consultation.color) {
                    context.consultation.feature = userMessage;
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng tr·∫£ l·ªùi t√≠nh nƒÉng quan t√¢m: "${userMessage}". D·ª±a tr√™n s·∫£n ph·∫©m: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n, c·∫£m ∆°n v√† h·ªèi v·ªÅ m√†u s·∫Øc h·ªç th√≠ch (v√≠ d·ª•: ƒëen, tr·∫Øng, xanh).`;
                    reply = await getGeminiResponse(prompt);
                    imageUrl = `/images/${product.image_url}`;
                    res.json({ _text: reply, imageUrl });
                    return;
                } else {
                    context.consultation.color = userMessage;
                    const consultationData = {
                        purpose: context.consultation.purpose,
                        budget: context.consultation.budget,
                        feature: context.consultation.feature,
                        color: context.consultation.color
                    };
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng tr·∫£ l·ªùi m√†u s·∫Øc: "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m: ${JSON.stringify(productData)} v√† th√¥ng tin t∆∞ v·∫•n: ${JSON.stringify(consultationData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n, t√≥m t·∫Øt nhu c·∫ßu c·ªßa h·ªç v√† g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p, sau ƒë√≥ h·ªèi xem h·ªç c√≥ mu·ªën xem chi ti·∫øt kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    context.consultation = { purpose: null, budget: null, feature: null, color: null };
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    res.json({ _text: reply, imageUrl, showButtons });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}" trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† g·ª£i √Ω t∆∞ v·∫•n s·∫£n ph·∫©m kh√°c.`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'hoi_khuyen_mai') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    const productData = {
                        name: product.name,
                        promotion_names: product.promotion_names || 'Kh√¥ng c√≥ khuy·∫øn m√£i'
                    };
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n v·ªÅ khuy·∫øn m√£i v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën ƒë·∫∑t mua kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                    res.json({ _text: reply, imageUrl, showButtons });
                    return;
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}" trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† g·ª£i √Ω h·ªèi v·ªÅ s·∫£n ph·∫©m kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                    res.json({ _text: reply });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng ch·ªâ r√µ s·∫£n ph·∫©m n√†o. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ s·∫£n ph·∫©m, v√≠ d·ª•: "iPhone 14 c√≥ khuy·∫øn m√£i g√¨ kh√¥ng?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'hoi_bao_hanh') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    const productData = {
                        name: product.name,
                        warranty_period: product.warranty_period ? `${product.warranty_period} th√°ng` : 'Kh√¥ng c√≥ th√¥ng tin'
                    };
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n v·ªÅ b·∫£o h√†nh v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                    res.json({ _text: reply, imageUrl, showButtons });
                    return;
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}" trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† g·ª£i √Ω h·ªèi v·ªÅ s·∫£n ph·∫©m kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                    res.json({ _text: reply });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng ch·ªâ r√µ s·∫£n ph·∫©m n√†o. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ s·∫£n ph·∫©m, v√≠ d·ª•: "B·∫£o h√†nh c·ªßa Galaxy S23 bao l√¢u?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'tim_kiem_theo_thuong_hieu') {
            let targetBrand = brand || context.lastBrand;
            if (targetBrand) {
                const products = await findProductsByBrand(targetBrand);
                if (products.length > 0) {
                    const productList = products.map(p => ({
                        name: p.name,
                        brand: p.brand,
                        price: formatPrice(p.price),
                        image_url: p.image_url
                    }));
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu, ƒë√¢y l√† c√°c s·∫£n ph·∫©m c·ªßa ${targetBrand}: ${JSON.stringify(productList)}. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, li·ªát k√™ s·∫£n ph·∫©m v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën ch·ªçn m·∫´u n√†o kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    context.lastBrand = targetBrand;
                    context.lastProduct = null;
                    context.awaitingProductChoice = true;
                    res.json({ _text: reply, imageUrl: null, showButtons: false, products });
                    return;
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c·ªßa ${targetBrand} trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng c√≥ s·∫£n ph·∫©m v√† g·ª£i √Ω h·ªèi v·ªÅ th∆∞∆°ng hi·ªáu kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                    context.lastBrand = null;
                    res.json({ _text: reply });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th∆∞∆°ng hi·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ th∆∞∆°ng hi·ªáu, v√≠ d·ª•: "C√≥ s·∫£n ph·∫©m n√†o c·ªßa Samsung kh√¥ng?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'hoi_gia') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    const productData = {
                        name: product.name,
                        price: formatPrice(product.price)
                    };
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n v·ªÅ gi√° v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                    res.json({ _text: reply, imageUrl, showButtons });
                    return;
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}" trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† g·ª£i √Ω h·ªèi v·ªÅ s·∫£n ph·∫©m kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                    res.json({ _text: reply });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng ch·ªâ r√µ s·∫£n ph·∫©m n√†o. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ s·∫£n ph·∫©m, v√≠ d·ª•: "iPhone 14 gi√° bao nhi√™u?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'hoi_mau_sac') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    const productData = {
                        name: product.name,
                        colors: product.colors || 'Kh√¥ng c√≥ th√¥ng tin'
                    };
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n v·ªÅ m√†u s·∫Øc v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                    res.json({ _text: reply, imageUrl, showButtons });
                    return;
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}" trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† g·ª£i √Ω h·ªèi v·ªÅ s·∫£n ph·∫©m kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                    res.json({ _text: reply });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng ch·ªâ r√µ s·∫£n ph·∫©m n√†o. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ s·∫£n ph·∫©m, v√≠ d·ª•: "iPhone 14 c√≥ m√†u g√¨?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'hoi_tra_gop') {
            let targetProductName = productName || context.lastProduct?.name;
            if (targetProductName) {
                const product = await getProductInfo(targetProductName);
                if (product) {
                    const productData = {
                        name: product.name,
                        price: formatPrice(product.price),
                        tra_gop: 'H·ªó tr·ª£ tr·∫£ g√≥p 0% l√£i su·∫•t trong 6 th√°ng'
                    };
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu: ${JSON.stringify(productData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n v·ªÅ tr·∫£ g√≥p v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën bi·∫øt th√™m ho·∫∑c ƒë·∫∑t mua kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    imageUrl = `/images/${product.image_url}`;
                    showButtons = true;
                    context.lastProduct = product;
                    context.lastBrand = product.brand;
                    res.json({ _text: reply, imageUrl, showButtons });
                    return;
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${targetProductName}" trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng t√¨m th·∫•y v√† g·ª£i √Ω h·ªèi v·ªÅ s·∫£n ph·∫©m kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                    res.json({ _text: reply });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng ch·ªâ r√µ s·∫£n ph·∫©m n√†o. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ s·∫£n ph·∫©m, v√≠ d·ª•: "iPhone 14 c√≥ tr·∫£ g√≥p kh√¥ng?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'so_sanh_san_pham') {
            const productName1 = witResponse.entities?.['product_name:product_name']?.[0]?.value || null;
            const productName2 = witResponse.entities?.['product_name:product_name']?.[1]?.value || null;

            if (productName1 && productName2) {
                const comparison = await compareProducts(productName1, productName2);
                if (comparison) {
                    const { product1, product2 } = comparison;
                    const comparisonData = {
                        product1: {
                            name: product1.name,
                            price: formatPrice(product1.price),
                            colors: product1.colors || 'Kh√¥ng c√≥ th√¥ng tin',
                            storage: product1.storage || 'Kh√¥ng c√≥ th√¥ng tin',
                            features: product1.features || 'Kh√¥ng c√≥ th√¥ng tin'
                        },
                        product2: {
                            name: product2.name,
                            price: formatPrice(product2.price),
                            colors: product2.colors || 'Kh√¥ng c√≥ th√¥ng tin',
                            storage: product2.storage || 'Kh√¥ng c√≥ th√¥ng tin',
                            features: product2.features || 'Kh√¥ng c√≥ th√¥ng tin'
                        }
                    };
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n th√¥ng tin t·ª´ c∆° s·ªü d·ªØ li·ªáu: ${JSON.stringify(comparisonData)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n, so s√°nh hai s·∫£n ph·∫©m v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën xem chi ti·∫øt kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    context.lastProduct = null;
                    context.lastBrand = null;
                    res.json({ _text: reply });
                    return;
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y m·ªôt trong hai s·∫£n ph·∫©m "${productName1}" ho·∫∑c "${productName2}" trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o l·ªói v√† g·ª£i √Ω th·ª≠ l·∫°i.`;
                    reply = await getGeminiResponse(prompt);
                    res.json({ _text: reply });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng cung c·∫•p ƒë·ªß t√™n hai s·∫£n ph·∫©m ƒë·ªÉ so s√°nh. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ hai s·∫£n ph·∫©m, v√≠ d·ª•: "So s√°nh iPhone 14 v√† Galaxy S23".`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'tim_kiem_thuong_hieu_mau') {
            let targetBrand = brand || context.lastBrand;
            if (targetBrand && color) {
                const products = await findProductsByBrand(targetBrand, null, color);
                if (products.length > 0) {
                    const productList = products.map(p => ({
                        name: p.name,
                        brand: p.brand,
                        price: formatPrice(p.price),
                        image_url: p.image_url
                    }));
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu, ƒë√¢y l√† c√°c s·∫£n ph·∫©m c·ªßa ${targetBrand} m√†u ${color}: ${JSON.stringify(productList)}. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, li·ªát k√™ s·∫£n ph·∫©m v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën xem chi ti·∫øt kh√¥ng.`;
                    reply = await getGeminiResponse(prompt);
                    context.lastBrand = targetBrand;
                    context.lastProduct = null;
                    res.json({ _text: reply, imageUrl: null, showButtons: false, products });
                    return;
                } else {
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c·ªßa ${targetBrand} m√†u ${color} trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng c√≥ s·∫£n ph·∫©m v√† g·ª£i √Ω xem m√†u kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                    context.lastBrand = null;
                    res.json({ _text: reply });
                    return;
                }
            } else {
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng ƒë·ªß th√¥ng tin v·ªÅ th∆∞∆°ng hi·ªáu ho·∫∑c m√†u s·∫Øc. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ th∆∞∆°ng hi·ªáu v√† m√†u, v√≠ d·ª•: "C√≥ s·∫£n ph·∫©m Samsung m√†u ƒëen kh√¥ng?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        } else if (intent === 'hoi_mau_san_pham') {
            let targetBrand = brand || extractBrandFromMessage(userMessage);
            if (targetBrand && targetBrand.toLowerCase() === 'iphone') {
                targetBrand = 'Apple'; // N·∫øu th∆∞∆°ng hi·ªáu l√† 'iphone', chuy·ªÉn th√†nh 'Apple'
            }
        
            if (targetBrand) {
                const productList = await findProductsByBrand(targetBrand);  // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu
                if (productList.length > 0) {
                    products = productList.map(p => ({
                        name: p.name,
                        brand: p.brand,
                        price: formatPrice(p.price),
                        image_url: p.image_url ? `/images/${p.image_url}` : '/images/default.jpg'  // H√¨nh ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ h√¨nh ·∫£nh
                    }));
        
                    // T·∫°o HTML ƒë·ªÉ hi·ªÉn th·ªã s·∫£n ph·∫©m k√®m h√¨nh ·∫£nh
                    let productGrid = '<div class="product-grid">';
                    products.forEach(product => {
                        const imageSrc = product.image_url; // L·∫•y ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh
                        productGrid += `
                            <div class="product-card">
                                <img src="${imageSrc}" class="product-image" alt="${product.name}">
                                <div class="product-info">
                                    <h3>${product.name}</h3>
                                    <p>${product.price}</p>
                                    <button class="buy-btn" data-product-name="${product.name}">Ch·ªçn m·∫´u n√†y</button>
                                </div>
                            </div>
                        `;
                    });
                    productGrid += '</div>';
        
                    // G·ª≠i prompt ƒë·∫øn Gemini AI ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi t·ª± nhi√™n v·ªõi c√°c s·∫£n ph·∫©m
                    const prompt = `M√¨nh l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". D·ª±a tr√™n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu, ƒë√¢y l√† c√°c s·∫£n ph·∫©m c·ªßa ${targetBrand}. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, li·ªát k√™ s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng vƒÉn b·∫£n v√† h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën ch·ªçn m·∫´u n√†o kh√¥ng. D∆∞·ªõi ƒë√¢y l√† HTML ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch: ${productGrid}`;
        
                    // L·∫•y ph·∫£n h·ªìi t·ª´ Gemini AI
                    reply = await getGeminiResponse(prompt);
        
                    context.lastBrand = targetBrand;
                    context.lastProduct = null;
                    context.awaitingProductChoice = true;  // ƒê·∫£m b·∫£o frontend x·ª≠ l√Ω tr·∫°ng th√°i n√†y
        
                    // Tr·∫£ l·ªùi ng∆∞·ªùi d√πng v·ªõi th√¥ng tin s·∫£n ph·∫©m v√† h√¨nh ·∫£nh
                    res.json({ _text: reply, imageUrl: products[0].image_url, showButtons: true, products, productGrid });
                    return;
                } else {
                    // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c·ªßa th∆∞∆°ng hi·ªáu, tr·∫£ l·ªùi kh√¥ng t√¨m th·∫•y
                    const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c·ªßa ${targetBrand} trong c∆° s·ªü d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¥ng b√°o kh√¥ng c√≥ s·∫£n ph·∫©m v√† g·ª£i √Ω h·ªèi v·ªÅ th∆∞∆°ng hi·ªáu kh√°c.`;
                    reply = await getGeminiResponse(prompt);
                    context.lastBrand = null;
                    res.json({ _text: reply });
                    return;
                }
            } else {
                // N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th∆∞∆°ng hi·ªáu, y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p th√™m th√¥ng tin
                const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}", nh∆∞ng kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th∆∞∆°ng hi·ªáu. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªâ r√µ th∆∞∆°ng hi·ªáu, v√≠ d·ª•: "Shop c√≥ b√°n iPhone kh√¥ng?"`;
                reply = await getGeminiResponse(prompt);
                res.json({ _text: reply });
                return;
            }
        }
        
         else if (intent === 'hoi_tinh_trang_hang') {
            const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". H√£y tr·∫£ l·ªùi t·ª± nhi√™n r·∫±ng t·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu ch√≠nh h√£ng, m·ªõi 100% v√† c√≤n nguy√™n b·∫£o h√†nh, sau ƒë√≥ h·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng.`;
            reply = await getGeminiResponse(prompt);
            res.json({ _text: reply });
            return;
        } else {
            const contextPrompt = {
                lastProduct: context.lastProduct?.name || 'kh√¥ng c√≥ s·∫£n ph·∫©m',
                lastBrand: context.lastBrand || 'kh√¥ng c√≥ th∆∞∆°ng hi·ªáu',
                lastIntent: context.lastIntent || 'kh√¥ng c√≥ intent',
                history: context.history.slice(-3),
                consultation: context.consultation
            };
            const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}". Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c √Ω ƒë·ªãnh c·ª• th·ªÉ. D·ª±a tr√™n ng·ªØ c·∫£nh: ${JSON.stringify(contextPrompt)}, h√£y tr·∫£ l·ªùi t·ª± nhi√™n v√† ph√π h·ª£p.`;
            reply = await getGeminiResponse(prompt);
            context.lastProduct = null;
            context.lastBrand = null;
        }

        context.lastIntent = intent;
        context.history.push({ intent, productName, brand, userMessage, reply });
        if (context.history.length > 10) context.history.shift();

        console.log(`ü§ñ Bot: ${reply}`);
        res.json({ _text: reply, imageUrl, showButtons, products });
    } catch (error) {
        console.error("‚ùå L·ªói t·ªïng qu√°t trong chatbot:", error);
        const prompt = `B·∫°n l√† chatbot c·ªßa m·ªôt c·ª≠a h√†ng ƒëi·ªán tho·∫°i. ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: "${userMessage}". H√£y tr·∫£ l·ªùi t·ª± nhi√™n, xin l·ªói v√† g·ª£i √Ω th·ª≠ l·∫°i sau.`;
        reply = await getGeminiResponse(prompt);
        res.json({ _text: reply });
    }
});

// Ch·∫°y server
app.listen(PORT, () => {
    console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i: http://localhost:${PORT}`);
});